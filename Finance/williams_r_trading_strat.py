# -*- coding: utf-8 -*-
"""Williams %r Trading Strat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VkS0musbxrRL7nzD1N0qYcYae3mJODDq
"""

#willamns %r trading stat - implementation - backtest

#import libs and dependancies
import pandas as pd # store the btc price data into table format 
import numpy as np # 3d array structures 
import requests # pull btc price data from api 
import matplotlib.pyplot as plt # visulisation
from math import floor # largest int < || = 0 
from termcolor import colored as cl #colour formatting
from datetime import datetime
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

#plt styles 
plt.rcParams['figure.figsize'] = (20,10)
plt.style.use('fivethirtyeight')

#pandas styles 
pd.set_option('expand_frame_rep',False)

#get historical price data: BTC - cryptocompare api 
def get_hist_data(from_sym='BTC', to_sym='USD', timeframe = 'day', limit=2000, aggregation=1, exchange=''):
    #base api url 
    baseurl = 'https://min-api.cryptocompare.com/data/v2/histo'
    #append sting with time frame for api request
    baseurl += timeframe
    
    #parameters for API call
    parameters = {'fsym': from_sym,
                  'tsym': to_sym,
                  'limit': limit,
                  'aggregate': aggregation}

    if exchange:
        print('exchange: ', exchange)
        parameters['e'] = exchange    
    
    print('baseurl: ', baseurl) 
    print('timeframe: ', timeframe)
    print('parameters: ', parameters)
    
    # Concat baseurl + params to use for api call 
    response = requests.get(baseurl, params=parameters)   
    #store response as json
    data = response.json()['Data']['Data'] 
    return data

def json_to_df(data):
#data from json is a structure of an array of dictionarys
    df = pd.DataFrame.from_dict(data)
    #time is stored as epoch value so conversion is needed
    df['time'] = pd.to_datetime(df['time'],unit='s')
    df.set_index('time',inplace=True)
    df.index = pd.to_datetime(df.index)
    print(df.tail())
    return df

#plot df using plt
def plot_data(df,cyrptoCurrency, targetCurrency):
  plt.figure(figsize=(15,5))
  plt.title('{} / {} price data'.format(cryptoCurrency,targetCurrency))
  plt.plot(df.index, df.close)
  plt.legend()
  plt.show()

  return None

#init 

cryptoCurrency = 'BTC'
targetCurrency = 'USD'

data = get_hist_data(cryptoCurrency,targetCurrency,'day',365)
df = json_to_df(data)

plot_data(df, cryptoCurrency,targetCurrency)

#calc values of w%r 
#func that takes high, low, close, lookback
#cals W%R using formula 
#stores value in df
def get_wr(high, low, close, lookback):
  highH = high.rolling(lookback).max()
  lowL = low.rolling(lookback).min()
  wr = -100*((highH - close) / (highH - lowL))
  return wr 


df['wr_14'] = get_wr(df['high'],df['low'],df['close'],14)
data = df.dropna()
df

#plot willams value 
ax1 = plt.subplot2grid((11,1), (0,0), rowspan = 5, colspan = 1)
ax2 = plt.subplot2grid((11,1), (6,0), rowspan = 5, colspan = 1)
ax1.plot(df['close'], linewidth = 2)
ax1.set_title('BTC Close')
ax2.plot(df['wr_14'], color = 'orange', linewidth = 2)
ax2.axhline(-20, linewidth = 1.5, linestyle = '--', color = 'grey')
ax2.axhline(-80, linewidth = 1.5, linestyle = '--', color = 'grey')
ax2.set_title('BTC WILLIAMS %R 14')
plt.show()

#trading strat
def wr_strategy(prices,wr):
  #values of empty arrays will be appended throughout the strat
  #initiate buy & selling arrays 
  buy_price = []
  sell_price = []
  #init signal array
  wr_signal = []
  #set signal to 0
  signal = 0 

#Pass conditions of the strat through the for loop 
# if coniditons are met, respective values will be appended to list
# if the buy signal gets met value will be appended to buy_price and signal_value will be set to 1 to represent a buy order
#if the sell condition gets met the sell price will be appended tot the sell_price & -1 to the singal[]
#return the values of the arrays.
  for i in range(len(wr)):
    if wr[i-1] > -80 and wr[i] < -80:
      if signal != 1:
        buy_price.append(prices[i])
        sell_price.append(np.nan)
        signal = 1
        wr_signal.append(signal)
      else: 
        buy_price.append(np.nan)
        sell_price.append(np.nan)
        wr_signal.append(0)
    elif wr[i-1] < -20 and wr[i] > -20:
      if signal != -1:
        buy_price.append(np.nan)
        sell_price.append(prices[i])
        signal = -1 
        wr_signal.append(signal)
      else: 
        buy_price.append(np.nan)
        sell_price.append(np.nan)
        wr_signal.append(0)
    else:
      buy_price.append(np.nan)
      sell_price.append(np.nan)
      wr_signal.append(0)
  return buy_price, sell_price, wr_signal  
buy_price,sell_price,wr_signal = wr_strategy(df['close'],df['wr_14'])

def ema(data,period = 20, column = 'close'):
  return df['close'].ewm(span=period,adjust = False).mean()

df['EMA'] = ema(df)
df

ax1 = plt.subplot2grid((11,1), (0,0), rowspan = 5, colspan = 1)
ax2 = plt.subplot2grid((11,1), (6,0), rowspan = 5, colspan = 1)
ax1.plot(df['close'], linewidth = 2,label = 'Close ',color = 'purple')
ax1.plot(df['EMA'], linewidth = 2,color = 'yellow',label = 'EMA')
ax1.plot(df.index, buy_price, marker = '^', markersize = 12, linewidth = 0, color = 'green', label = 'BUY SIGNAL')
ax1.plot(df.index, sell_price, marker = 'v', markersize = 12, linewidth = 0, color = 'r', label = 'SELL SIGNAL')
plt.xlabel('Time')
ax1.legend()
ax1.set_title('Trading Signals')
ax2.plot(df['wr_14'], color = 'orange', linewidth = 2)
ax2.axhline(-20, linewidth = 1.5, linestyle = '--', color = 'grey')
ax2.axhline(-80, linewidth = 1.5, linestyle = '--', color = 'grey')
ax2.set_title('WILLIAMS %R 14')
plt.show()

position = []
for i in range(len(wr_signal)):
    if wr_signal[i] > 1:
        position.append(0)
    else:
        position.append(1)
        
for i in range(len(df['close'])):
    if wr_signal[i] == 1:
        position[i] = 1
    elif wr_signal[i] == -1:
        position[i] = 0
    else:
        position[i] = position[i-1]
        
close_price = df['close']
wr = df['wr_14']
wr_signal = pd.DataFrame(wr_signal).rename(columns = {0:'wr_signal'}).set_index(df.index)
position = pd.DataFrame(position).rename(columns = {0:'wr_position'}).set_index(df.index)

frames = [close_price, wr, wr_signal, position]
strategy = pd.concat(frames, join = 'inner', axis = 1)

strategy.tail()

#back Testing
btc_bckTst = pd.DataFrame(np.diff(df['close'])).rename(columns={0:'returns'})
wr_strategy_bckTst = []

for i in range(len(btc_bckTst)):
  returns = btc_bckTst['returns'][i]*strategy['wr_position'][i]
  wr_strategy_bckTst.append(returns)

wr_strategy_bckTst_df = pd.DataFrame(wr_strategy_bckTst).rename(columns = {0:'wr_returns'})
investment_value = 100000
number_of_tokens = floor(investment_value/df['close'][-1])
wr_investment_bckTst = []

for i in range(len(wr_strategy_bckTst_df['wr_returns'])):
  returns = number_of_tokens * wr_strategy_bckTst_df['wr_returns'][i]
  wr_investment_bckTst.append(returns)

wr_investment_bckTst_df = pd.DataFrame(wr_investment_bckTst).rename(columns = {0:'investment_returns'})
total_investment_bckTst = round(sum(wr_investment_bckTst_df['investment_returns']), 2)
profit_percentage = floor((total_investment_bckTst/investment_value)*100)
print(cl('Profit gained from the W%R strategy by investing $100k in BTC : {}'.format(total_investment_bckTst), attrs = ['bold']))
print(cl('Profit percentage of the W%R strategy : {}%'.format(profit_percentage), attrs = ['bold']))

BTC_ret = pd.DataFrame(np.diff(df['close'])).rename(columns = {0:'returns'})
wr_strategy_ret = []

for i in range(len(BTC_ret)):
    returns = BTC_ret['returns'][i]*strategy['wr_position'][i]
    wr_strategy_ret.append(returns)
    
wr_strategy_ret_df = pd.DataFrame(wr_strategy_ret).rename(columns = {0:'wr_returns'})
investment_value = 100000
number_of_stocks = floor(investment_value/df['close'][-1])
wr_investment_ret = []

for i in range(len(wr_strategy_ret_df['wr_returns'])):
    returns = number_of_stocks*wr_strategy_ret_df['wr_returns'][i]
    wr_investment_ret.append(returns)

wr_investment_ret_df = pd.DataFrame(wr_investment_ret).rename(columns = {0:'investment_returns'})
total_investment_ret = round(sum(wr_investment_ret_df['investment_returns']), 2)
profit_percentage = floor((total_investment_ret/investment_value)*100)
print(cl('Profit gained from the W%R strategy by investing $100k in BTC : ${}'.format(total_investment_ret), attrs = ['bold']))
print(cl('Profit percentage of the W%R strategy : {}%'.format(profit_percentage), attrs = ['bold']))

